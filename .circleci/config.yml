---

# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  rubocop:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.6.3-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: 🏗️ Install dependencies
          command: |
            gem install bundler
            bundle update --bundler
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: 🧹 Run Ruby lint
          command: |
            bundle exec rubocop

  markdown-lint:
    docker:
      - image: circleci/ruby:2.6.3-node-browsers

    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: 🏗️ Install dependencies
          command: |
            gem install bundler
            bundle update --bundler
            bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
      - run:
          name: 🧹 Run Markdown lint
          command: |
            bundle exec mdl .

  yaml-lint:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.3

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: 🏗️ Install dependencies
          command: |
            sudo apt update
            sudo pip install yamllint

      - run:
          name: 🧹 Run YAML lint
          command: |
            yamllint .

  percy:
    docker:
      - image: circleci/ruby:2.6.3-node-browsers
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: 🏗️ Install dependencies
          command: |
            gem install bundler
            bundle update --bundler
            bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
      - run:
          name: Run percy snapshots
          command: |
            bundle exec jekyll build
            npx percy snapshot _site/ --ignore-files "assets/python/**,parallel-universe/index.html"

  pylint:
    docker:
      - image: circleci/python:3.7.0
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: 🏗️ Install dependencies
          command: |
            sudo apt update
            sudo pip3 install pylint lxml requests
      - run:
          name: 🧹 Run Pylint
          command: |
            find . -name "*.py" | xargs pylint --disable=C0103

  shellcheck:
    docker:
      - image: nlknguyen/alpine-shellcheck:v0.4.6
    steps:
      - checkout
      - run:
          name: 🧹 Lint shell scripts
          command: |
            find . -type f -name '*.sh' | wc -l
            find . -type f -name '*.sh' | xargs shellcheck --external-sources

  go-lint:
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.13.3 #
    # directory where steps are run. Path must conform to the Go Workspace requirements
    working_directory: /go/src/github.com/fuchsia-programming/fuchsia-programming.github.io

    steps:
      - checkout
      - restore_cache: # restores saved cache if no changes are detected since last run
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - v1-pkg-cache

      - run: go get -u github.com/mgechev/revive
      - run:
          name: 🧹 Run Golang revive lint
          command: |
            cd source/scrapers/go
            sh ./check-revive.sh || exit 1

      - save_cache: # Store cache in the /go/pkg directory
          key: v1-pkg-cache
          paths:
            - "/go/pkg"

  shell:
    docker:
      - image: circleci/python:3.7.0
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: 🐚 Print quotes from Brainyquote using shell
          command: |
            cd source/scrapers/shell
            sh ./brainyquote.sh tennis balls
      - run:
          name: 🐚 Print the maximum number of contributions in the last year from a users GitHub profile using sed
          command: |
            cd source/scrapers/shell
            sh ./github-max-per-day-sed.sh fabpot
      - run:
          name: 🐚 Print the maximum number of contributions in the last year from a users GitHub profile using pcregrep
          command: |
            cd source/scrapers/shell
            sh ./github-max-per-day-pcregrep.sh fabpot
      - run:
          name: 🐚 Print the maximum number of contributions in the last year from a users GitHub profile using perl
          command: |
            cd source/scrapers/shell
            sh ./github-max-per-day-perl.sh fabpot
      - run:
          name: 🐚 Print the maximum number of contributions in the last year from a users GitHub profile using awk
          command: |
            cd source/scrapers/shell
            sh ./github-max-per-day-awk.sh fabpot


workflows:
  version: 2
  build:
    jobs:
      - rubocop
      - markdown-lint
      - yaml-lint
      - percy
      - pylint
      - shellcheck
      - go-lint
      - shell
